plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.diffplug.eclipse.apt' version '3.25.0'
	id 'org.seasar.doma.compile' version '1.1.0'
	id 'java-library'
	id 'eclipse'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

compileJava {
	aptOptions {
		processorArgs = [
			'doma.dao.subpackage' : 'impl', 'doma.dao.suffix' : 'Impl',
		]
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	domaGenRuntime
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.7.0'
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
	implementation 'org.hibernate.validator:hibernate-validator:7.0.2.Final'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	annotationProcessor "org.seasar.doma:doma-processor:2.53.1"
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    domaGenRuntime "org.seasar.doma:doma-gen:2.28.0"
	domaGenRuntime 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.apache.httpcomponents.client5:httpclient5'
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { it.path == '.apt_generated' }
            }
			whenMerged {
				def aptSource = new org.gradle.plugins.ide.eclipse.model.SourceFolder(".apt_generated", "bin/main")
				aptSource.entryAttributes['optional'] = 'true'
				aptSource.entryAttributes['ignore_optional_problems'] = 'true'
				entries += aptSource
			}
        }
    }
}

tasks.named('test') {
	useJUnitPlatform()
}

task "gen_doma" {
    group = 'doma-gen'
    description = 'dao、entity、sqlを生成'
    doLast {
		def url          = "jdbc:postgresql://localhost:5432/app"
		def user         = "postgres"
		def password     = "1122"

		println " url = ${url}"
		println " user = ${user}"
		println " password = ${password}"

        ant.taskdef(
			resource: 'domagentask.properties',
			classpath: (configurations.domaGenRuntime + sourceSets.main.output).asPath
		)
        ant.gen(url: "${url}", user: "${user}", password: "${password}", templatePrimaryDir: 'doma-template',
        	tableTypes: 'TABLE, VIEW, sequence',
        	tableNamePattern:
        	'QUOTES|QUOTES_DETAIL'
        ) {
            entityConfig(
            	packageName: "com.example.dac.entity",
            	overwrite: true,
            	useListener: false
            )
            daoConfig(
            	packageName: "com.example.dac.dao",
            	overwrite: false
            )
            sqlConfig()
        }
    }
}
